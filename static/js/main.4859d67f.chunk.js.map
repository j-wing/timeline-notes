{"version":3,"sources":["timestamp.tsx","util.ts","NoteLine.ts","DriveSyncHandler.ts","Note.ts","LocalStore.ts","NoteContentHandler.ts","noterow.tsx","notetitle.tsx","noterowmirror.tsx","notifier.tsx","menu.tsx","statusarea.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Timestamp","props","interval","state","timestamp","initialTimestamp","className","this","toLocaleString","hour","minute","second","hour12","setState","Date","shouldTick","setupTimer","prevProps","prevState","window","clearInterval","setInterval","tick","React","Component","computeIndentString","units","Array","INDENT_LENGTH","fill","join","DriveSignInState","DriveSyncStatus","NoteLine","editTimestamp","note","indentedUnits","content","creationTimestamp","updateLastEditTime","setEditTimestamp","i","trim","length","id","getTime","rawNoteLine","noteLine","setContent","setCreationTimestamp","Note","noteLines","Map","noteLineIdsOrdered","title","creationTime","timestampsLocked","driveId","makeDefaultTitle","toLocaleDateString","makeNewLine","set","push","lineId","lineIndex","indexOf","console","error","splice","from","flatMap","get","Math","min","keys","locked","values","isEmpty","output","forEach","line","convertToText","max","delete","idIndex","orderedNoteLineIds","map","noteLineId","undefined","Error","serialize","rawNote","setTitle","setTimestampsLocked","setDriveId","parsedNoteLines","deserialize","noteLineMap","setNoteLines","getNoteStorageId","localStorage","JSON","stringify","lastEditKey","parse","debug","LocalStore","saveNote","getLastEditedNote","NoteRow","timestampElement","createRef","entryboxElement","getLine","rowId","getIndentedUnits","entryboxContent","computeEntryboxContent","getContent","editedSinceLastFocus","focused","ref","getLastEditTimestamp","computeTimestampShouldTick","inputRef","onFocus","handleEntryboxFocus","bind","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","onChange","handleChange","onClick","handleClick","value","readOnly","getTimestampsLocked","rawContent","oldProps","oldState","setIndentedUnits","NoteContentHandler","updateNote","current","focus","entryboxElem","slice","selectionStart","entryElem","floor","clientHeight","e","clickHandler","keyUpHandler","target","keyDownHandler","key","preventDefault","shiftKey","focusHandler","currentRawLength","textLength","setSelectionRange","NoteTitle","editing","titleValue","type","onBlur","handleBlur","titleChangeHandler","currentTarget","NoteRowMirror","mirrorElem","style","width","getEntryboxWidth","firstRow","document","getElementsByClassName","clientWidth","DISCOVERY_DOCS","DOC_MIME","Message","signedInEventHandlers","syncStatusChangeHandlers","fireSyncStatusChange","LOADING","gapi","load","initClient","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","handleIsSignedInState","log","SIGNED_OUT","signInState","SIGNED_IN","handler","newStatus","isUserSignedIn","SYNCING","getDriveId","getParentFolderId","parentId","drive","files","create","name","getTitle","mimeType","parents","response","status","result","uploadContent","SYNCED","xhr","XMLHttpRequest","open","setRequestHeader","getToken","access_token","Promise","resolve","reject","onload","send","Menu","driveSignInState","DriveSyncHandler","addSignInStateHandler","toggleTimestampsString","driveMenuItems","Dropdown","Item","signOutHandler","signInHandler","DropdownButton","alignRight","newNoteHandler","timestampLockToggleHandler","clipboardHandler","Divider","githubHandler","bugHandler","SyncStatusArea","addSyncStatusChangeHandler","handleSyncStatusChange","syncStatus","text","href","showDocsLink","noteDriveId","rel","LockIcon","visibleText","noteLocked","StatusArea","Notifier","timerId","notification","NONE","messageData","Alert","variant","show","COPY_TO_CLIPBOARD_SUCCESS","COPY_TO_CLIPBOARD_FAILED","setNotification","notifType","data","clearTimeout","setTimeout","App","wrapperElement","mirrorRef","notifierRef","editedSinceLastDriveSync","syncTimer","firstNoteLineId","createNewNote","getFirstNoteLineId","focusedNoteRowId","currentRowCursorText","addLine","updateWindowTitle","noteId","syncTimerHandler","noteRows","getLines","noteRow","handleNoteRowKeyDown","handleNoteRowKeyUp","noteRowFocusHandler","handleNoteRowClick","handleTitleChange","handleToggleTimestampsLocked","copyToClipboard","signIn","signOut","navigator","clipboard","writeText","showCopyToClipboardSuccess","catch","r","showCopyToClipboardFailed","newTitle","n","getTextUntilCursor","getNoteLine","newNote","ctrlKey","addLineAfter","focusedRow","nextFocusedRowId","getPreviousRowId","deleteRow","currentRow","getCurrentRow","getNumRows","getNextRowId","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4859d67f.chunk.js","sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\n\ninterface TimestampState {\n    timestamp: Date;\n}\n\ninterface TimestampProps {\n    shouldTick: boolean;\n    initialTimestamp: Date;\n}\n\nexport class Timestamp extends React.Component<TimestampProps, TimestampState> {\n    interval: number;\n\n    constructor(props: TimestampProps) {\n        super(props);\n        this.state = { timestamp: this.props.initialTimestamp };\n        this.interval = -1;\n    }\n\n    render() {\n        return (\n            <span className=\"timestamp\">\n                {this.state.timestamp.toLocaleString(\"en-us\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    second: \"2-digit\",\n                    hour12: false\n                })}\n            </span>\n        );\n    }\n\n    tick() {\n        this.setState(state => ({ timestamp: new Date() }));\n    }\n\n    componentDidMount() {\n        if (this.props.shouldTick) {\n            this.setupTimer();\n        }\n    }\n\n    componentDidUpdate(prevProps: TimestampProps, prevState: TimestampState) {\n        if (prevProps.shouldTick !== this.props.shouldTick) {\n            if (this.props.shouldTick) {\n                this.setupTimer();\n            } else {\n                window.clearInterval(this.interval);\n            }\n        }\n    }\n\n    setupTimer() {\n        this.interval = window.setInterval(() => this.tick(), 500);\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.interval);\n    }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { INDENT_LENGTH } from './NoteLine'\r\n\r\nexport function computeIndentString(units: number): string {\r\n    /*eslint no-array-constructor: \"error\"*/\r\n    return new Array(units * INDENT_LENGTH)\r\n        .fill(\" \")\r\n        .join(\"\");\r\n}\r\n\r\nexport function removeIndent(str: string): string {\r\n    if (str.slice(0, INDENT_LENGTH - 1).trim().length === 0) {\r\n        return str.slice(INDENT_LENGTH);\r\n    }\r\n    \r\n    return str;\r\n}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Note } from \"./Note\";\nimport { computeIndentString } from \"./util\";\n\nexport const INDENT_LENGTH = 4;\n\nexport interface RawNoteLine {\n  content: string,\n  indentedUnits: number,\n  id: number,\n  editTimestamp: number;\n}\n\nexport class NoteLine {\n  private content: string = \"\";\n  private indentedUnits: number = 0;\n  private creationTimestamp: Date;\n\n  constructor(private editTimestamp: Date, private note: Note, indentedUnits?: number) {\n    this.creationTimestamp = new Date();\n    this.indentedUnits = indentedUnits || 0;\n  }\n\n  private setCreationTimestamp(timestamp: Date) {\n    this.creationTimestamp = timestamp;\n  }\n\n  get id(): number {\n    return this.creationTimestamp.getTime();\n  }\n\n  getContent(): string {\n    return this.content;\n  }\n\n  setContent(content: string, updateLastEditTime?: boolean) {\n    this.content = content;\n\n    if (updateLastEditTime) {\n      this.setEditTimestamp(new Date());\n    }\n  }\n\n  getLastEditTimestamp(): Date {\n    return this.editTimestamp;\n  }\n\n  setEditTimestamp(timestamp: Date) {\n    this.editTimestamp = timestamp;\n  }\n\n  getIndentedUnits(): number {\n    return this.indentedUnits;\n  }\n\n  setIndentedUnits(i: number) {\n    this.indentedUnits = i;\n  }\n\n  isEmpty(): boolean {\n    return (this.content.trim().length === 0);\n  }\n\n  convertToText(): string {\n    return this.editTimestamp.toLocaleString(\"en-us\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    second: \"2-digit\",\n                    hour12: false\n                })\n                + \" - \"\n                + computeIndentString(this.indentedUnits)\n                + this.content;\n  }\n\n  serialize(): RawNoteLine {\n    return {\n      id: this.id,\n      content: this.content,\n      indentedUnits: this.indentedUnits,\n      editTimestamp: this.editTimestamp.getTime()\n    }\n  }\n\n  static deserialize(note: Note, rawNoteLine: RawNoteLine): NoteLine {\n    let noteLine = new NoteLine(new Date(rawNoteLine.editTimestamp), note, rawNoteLine.indentedUnits);\n\n    noteLine.setContent(rawNoteLine.content)\n    noteLine.setCreationTimestamp(new Date(rawNoteLine.id));\n    return noteLine;\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Note } from \"./Note\";\r\n\r\ndeclare var gapi: any;\r\n\r\nconst API_KEY = \"AIzaSyBEH9v-TByqUFESw8vjl2YEDgAKoWm7n_8\";\r\nconst CLIENT_ID = \"370774814885-7kseam56ntmpklgnr9p00f8gh968cmtb.apps.googleusercontent.com\";\r\n// Array of API discovery doc URLs for APIs used by the quickstart\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\r\n\r\n// Authorization scopes required by the API; multiple scopes can be\r\n// included, separated by spaces.\r\nconst SCOPES = 'https://www.googleapis.com/auth/drive.file';\r\n\r\nconst DIRECTORY_MIME = \"application/vnd.google-apps.folder\";\r\nconst DOC_MIME = \"application/vnd.google-apps.document\";\r\n\r\nconst PARENT_NAME = \"Synced Interview Notes\";\r\nconst PARENT_ID_STORAGE_KEY = \"parent-drive-id\";\r\n\r\nexport enum DriveSignInState {\r\n    LOADING,\r\n    SIGNED_OUT,\r\n    SIGNED_IN\r\n}\r\n\r\nexport enum DriveSyncStatus {\r\n    LOADING,\r\n    SIGNED_OUT,\r\n    SYNCING,\r\n    SYNCED\r\n}\r\n\r\ntype SignedInEventHandler = (isSignedIn: DriveSignInState) => void;\r\ntype SyncStatusChangeHandler = (isSignedIn: DriveSyncStatus) => void;\r\n\r\nclass DriveSyncHandler {\r\n    private signedInEventHandlers: Array<SignedInEventHandler> = [];\r\n    private syncStatusChangeHandlers: Array<SyncStatusChangeHandler> = [];\r\n\r\n    async init(): Promise<void> {\r\n        this.fireSyncStatusChange(DriveSyncStatus.LOADING);\r\n        return gapi.load('client:auth2', this.initClient.bind(this));\r\n    }\r\n\r\n    initClient() {\r\n        gapi.client.init({\r\n            apiKey: API_KEY,\r\n            clientId: CLIENT_ID,\r\n            discoveryDocs: DISCOVERY_DOCS,\r\n            scope: SCOPES\r\n        }).then(() => {\r\n            // Listen for sign-in state changes.\r\n            gapi.auth2.getAuthInstance().isSignedIn.listen(this.handleIsSignedInState.bind(this));\r\n\r\n            this.handleIsSignedInState(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        })\r\n    }\r\n\r\n    handleIsSignedInState(isSignedIn: boolean) {\r\n        console.log('user is now', isSignedIn);\r\n\r\n        if (!isSignedIn) {\r\n            this.fireSyncStatusChange(DriveSyncStatus.SIGNED_OUT);\r\n        }\r\n\r\n        let signInState = (isSignedIn) ? DriveSignInState.SIGNED_IN : DriveSignInState.SIGNED_OUT;\r\n        for (let handler of this.signedInEventHandlers) {\r\n            handler(signInState);\r\n        }\r\n    }\r\n\r\n    addSignInStateHandler(handler: SignedInEventHandler) {\r\n        this.signedInEventHandlers.push(handler);\r\n    }\r\n\r\n    addSyncStatusChangeHandler(handler: SyncStatusChangeHandler) {\r\n        this.syncStatusChangeHandlers.push(handler);\r\n    }\r\n    \r\n    fireSyncStatusChange(newStatus: DriveSyncStatus) {\r\n        for (let handler of this.syncStatusChangeHandlers) {\r\n            handler(newStatus);\r\n        }\r\n    }\r\n\r\n    isUserSignedIn(): boolean {\r\n        return gapi.auth2.getAuthInstance().isSignedIn.get()\r\n    }\r\n\r\n    async saveNote(note: Note): Promise<string> {\r\n        if (!this.isUserSignedIn()) {\r\n            return \"\";\r\n        }\r\n\r\n        this.fireSyncStatusChange(DriveSyncStatus.SYNCING);\r\n        let id = \"\";\r\n        if (note.getDriveId().length === 0 && !note.isEmpty()) {\r\n            console.log(\"Creating new note to drive: \", note);\r\n            let parentId = await this.getParentFolderId();\r\n\r\n            let response = await gapi.client.drive.files.create({\r\n                name: note.getTitle(),\r\n                mimeType: DOC_MIME,\r\n                parents: [parentId],\r\n            })\r\n\r\n            console.log(\"Got create response: \", response);\r\n\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Got bad create response code\");\r\n            }\r\n            id = response.result.id;\r\n        } else if (note.getDriveId().length !== 0) {\r\n            console.log(\"Saving note to drive: \", note);\r\n            id = note.getDriveId();\r\n        }\r\n\r\n        if (id.length > 0) {\r\n            await this.uploadContent(id, note.convertToText());\r\n        }\r\n        this.fireSyncStatusChange(DriveSyncStatus.SYNCED);\r\n\r\n        return id;\r\n    }\r\n\r\n    async getParentFolderId(): Promise<string> {\r\n        let id = window.localStorage[PARENT_ID_STORAGE_KEY];\r\n        if (id === undefined) {\r\n            console.log(\"Creating new parent folder...\");\r\n            let response = await gapi.client.drive.files.create({\r\n                mimeType: DIRECTORY_MIME,\r\n                name: PARENT_NAME\r\n            })\r\n\r\n            console.log(\"got create response: \", response);\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Got bad create response code\");\r\n            }\r\n\r\n            id = response.result.id;\r\n            window.localStorage[PARENT_ID_STORAGE_KEY] = id;\r\n        } else {\r\n            console.log(\"Reusing drive id: \", id);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    async uploadContent(driveId: string, content: string): Promise<string> {\r\n        console.log(\"About to upload content for\", driveId);\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"PATCH\", \"https://www.googleapis.com/upload/drive/v3/files/\" + driveId + \"?uploadType=media\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + gapi.client.getToken().access_token);\r\n        xhr.setRequestHeader(\"Content-Type\", DOC_MIME);\r\n\r\n        return new Promise<string>((resolve, reject) => {\r\n            xhr.onload = () => resolve();\r\n            xhr.send(content);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default new DriveSyncHandler();","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RawNoteLine, NoteLine } from \"./NoteLine\";\n\nexport interface RawNote {\n  id: number,\n  title: string,\n  noteLines: Array<RawNoteLine>\n  timestampsLocked: boolean;\n  driveId: string;\n}\n\nexport class Note {\n  noteLines: Map<number, NoteLine> = new Map<number, NoteLine>();\n  // Since new lines can be inserted anywhere in the note, we need\n  // a separate array keeping track of the visual ordering of the rows\n  // in the note relative to each other.\n  noteLineIdsOrdered: Array<number> = [];\n  private title: string;\n  private creationTime: Date;\n  private timestampsLocked: boolean = false;\n  private driveId: string = \"\";\n\n  constructor() {\n    this.creationTime = new Date();\n\n    this.title = this.makeDefaultTitle();\n  }\n\n  makeDefaultTitle(): string {\n    return \"Interview on \"+ this.creationTime.toLocaleDateString();\n  }\n\n  get id(): number {\n    return this.creationTime.getTime();\n  }\n\n  private makeNewLine(indentedUnits?: number): NoteLine {\n    return new NoteLine(new Date(), this, indentedUnits);\n  }\n\n  addLine(indentedUnits?: number): NoteLine {\n    let noteLine = this.makeNewLine(indentedUnits);\n    this.noteLines.set(noteLine.id, noteLine);\n    this.noteLineIdsOrdered.push(noteLine.id);\n\n    return noteLine;\n  }\n\n  addLineAfter(lineId: number, indentedUnits?: number): (NoteLine | null) {\n    let lineIndex = this.noteLineIdsOrdered.indexOf(lineId);\n\n    if (lineIndex === -1) {\n      console.error(\"Got bad line id in addLineAfter:\", lineId, \"; current note:\", this);\n      return null;\n    }\n\n    let noteLine = this.makeNewLine(indentedUnits);\n\n    this.noteLines.set(noteLine.id, noteLine);\n    this.noteLineIdsOrdered.splice(lineIndex + 1, 0, noteLine.id);\n    return noteLine;\n  }\n\n  getLines(): Array<NoteLine> {\n    return Array.from(this.noteLineIdsOrdered.flatMap(id => {\n      let noteLine = this.noteLines.get(id);\n      if (noteLine) {\n        return [noteLine];\n      }\n      return [];\n    }));\n  }\n\n  getLine(id: number): NoteLine | undefined {\n    return this.noteLines.get(id);\n  }\n\n  getFirstNoteLineId(): number {\n    return Math.min(...Array.from(this.noteLines.keys()));\n  }\n\n  getTitle(): string {\n      return this.title;\n  }\n\n  setTitle(title: string) {\n    this.title = title;\n  }\n\n  getTimestampsLocked(): boolean {\n    return this.timestampsLocked;\n  }\n\n  setTimestampsLocked(locked: boolean) {\n    this.timestampsLocked = locked;\n  }\n\n  getDriveId(): string {\n    return this.driveId || \"\";\n  }\n\n  setDriveId(driveId: string) {\n    this.driveId = driveId;\n  }\n\n  isEmpty(): boolean {\n    for (let line of this.noteLines.values()) {\n      if (!line.isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  convertToText(): string {\n\n    let output = \"\";\n    this.noteLines.forEach(line => {\n      output += line.convertToText() + \"\\n\";\n    });\n\n    return output;\n  }\n\n  getPreviousRowId(id: number): number | null {\n    let lineIndex = this.noteLineIdsOrdered.indexOf(id);\n\n    if (lineIndex === -1) {\n      return null;\n    }\n\n    return this.noteLineIdsOrdered[Math.max(0, lineIndex - 1)];\n  }\n\n  getNextRowId(id: number): number | null {\n    let lineIndex = this.noteLineIdsOrdered.indexOf(id);\n\n    if (lineIndex === -1) {\n      return null;\n    }\n\n    return this.noteLineIdsOrdered[Math.min(this.noteLineIdsOrdered.length-1, lineIndex + 1)];\n  }\n\n  deleteRow(id: number) {\n    this.noteLines.delete(id);\n    let idIndex = this.noteLineIdsOrdered.indexOf(id);\n\n    if (idIndex !== -1) {\n      this.noteLineIdsOrdered.splice(idIndex, 1);\n    } else {\n      console.error(\"Tried to delete non-existent row with ID: \", id, this);\n    }\n  }\n\n  private setNoteLines(orderedNoteLineIds: Array<number>, noteLines: Map<number, NoteLine>) {\n    this.noteLineIdsOrdered = orderedNoteLineIds;\n    this.noteLines = noteLines;\n  }\n\n  serialize(): RawNote {\n    return {\n      title: this.title,\n      id: this.id,\n      timestampsLocked: this.timestampsLocked,\n      driveId: this.driveId,\n      noteLines: this.noteLineIdsOrdered.map(noteLineId => {\n        let noteLine = this.noteLines.get(noteLineId);\n        \n        if (noteLine === undefined) {\n          console.error(\"Note: \", this);\n          throw new Error(\"Got undefined note line during serialization.\");\n        }\n\n        return noteLine.serialize();\n      })\n    }\n  }\n\n  static deserialize(rawNote: RawNote): Note {\n    let note = new Note();\n    note.setTitle(rawNote.title);\n    note.setTimestampsLocked(rawNote.timestampsLocked);\n    note.setDriveId(rawNote.driveId);\n\n    let parsedNoteLines = rawNote.noteLines.map(rawNoteLine => NoteLine.deserialize(note, rawNoteLine));\n    let noteLineMap = new Map<number, NoteLine>();\n    parsedNoteLines.forEach(noteLine => noteLineMap.set(noteLine.id, noteLine));\n    note.setNoteLines(rawNote.noteLines.map(rawNoteLine => rawNoteLine.id), noteLineMap);\n    return note;\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Note } from \"./Note\";\r\n\r\nconst LAST_EDIT_KEY = 'lastEditedNote';\r\nclass LocalStore {\r\n\r\n    saveNote(note: Note) {\r\n        let id = this.getNoteStorageId(note);\r\n        window.localStorage[id] = JSON.stringify(note.serialize());\r\n        window.localStorage[LAST_EDIT_KEY] = id;\r\n    }\r\n\r\n    getLastEditedNote(): Note | null {\r\n        let lastEditKey = window.localStorage[LAST_EDIT_KEY];\r\n        if (lastEditKey === undefined) {\r\n            return null;\r\n        }\r\n\r\n        let rawNote = window.localStorage[lastEditKey];\r\n\r\n        if (rawNote === undefined) {\r\n            console.error(\"Tried to fetch non-existent note: \", lastEditKey);\r\n            return null;\r\n        }\r\n\r\n        return Note.deserialize(JSON.parse(rawNote));\r\n    }\r\n\r\n    getNoteStorageId(note: Note): string {\r\n        return 'note-' + note.id;\r\n    }\r\n}\r\n\r\nexport default new LocalStore();","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Note } from './Note';\r\nimport LocalStore from \"./LocalStore\";\r\n\r\nclass NoteContentHandler {\r\n    updateNote(note: Note) {\r\n        console.debug(\"Updating note: \", note);\r\n        LocalStore.saveNote(note);\r\n    }\r\n\r\n    getLastEditedNote(): Note | null {\r\n        return LocalStore.getLastEditedNote();\r\n    }\r\n}\r\n\r\nexport default new NoteContentHandler();","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { Timestamp } from \"./timestamp\";\nimport { NoteLine } from \"./NoteLine\";\nimport { Note } from \"./Note\";\nimport NoteContentHandler from \"./NoteContentHandler\";\nimport { computeIndentString } from \"./util\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nexport const ROW_HEIGHT = 39;\nexport const ENTRYBOX_CLASS_NAME = \"entrybox\";\n\ninterface NoteRowProps {\n    focusHandler: Function;\n    keyDownHandler: (n: NoteRow, e: React.KeyboardEvent) => boolean;\n    keyUpHandler: (n: NoteRow) => void;\n    clickHandler: (n: NoteRow) => void;\n    note: Note;\n    rowId: number;\n    focused: boolean;\n}\n\ninterface NoteRowState {\n    indentedUnits: number;\n    entryboxContent: string;\n    editedSinceLastFocus: boolean;\n}\n\nexport class NoteRow extends React.Component<NoteRowProps, NoteRowState> {\n    timestampElement = React.createRef<Timestamp>();\n    entryboxElement = React.createRef<HTMLTextAreaElement>();\n    noteLine: NoteLine;\n\n    constructor(props: NoteRowProps) {\n        super(props);\n\n        let noteLine = props.note.getLine(props.rowId);\n        if (noteLine === undefined) {\n            console.error(\"Note: \", props.note);\n            throw new Error(\"Got bad row id. Provided row id: \" + props.rowId);\n        }\n\n        this.noteLine = noteLine;\n\n        this.state = {\n            indentedUnits: this.noteLine.getIndentedUnits(),\n            entryboxContent: this.computeEntryboxContent(this.noteLine.getIndentedUnits(), this.noteLine.getContent()),\n            editedSinceLastFocus: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={`noterow ${this.props.focused ? 'noterow-focused' : 'noterow-unfocused'}`}>\n                <Timestamp ref={this.timestampElement}\n                    initialTimestamp={this.noteLine.getLastEditTimestamp()}\n                    shouldTick={this.computeTimestampShouldTick()} />\n                <TextareaAutosize inputRef={this.entryboxElement}\n                    onFocus={this.handleEntryboxFocus.bind(this)}\n                    onKeyDown={this.handleKeyDown.bind(this)}\n                    onKeyUp={this.handleKeyUp.bind(this)}\n                    onChange={this.handleChange.bind(this)}\n                    onClick={this.handleClick.bind(this)}\n                    value={this.state.entryboxContent}\n                    readOnly={!this.props.focused}\n                    className={ENTRYBOX_CLASS_NAME} />\n            </div>\n        )\n    }\n\n    computeTimestampShouldTick() {\n        if (this.props.note.getTimestampsLocked()) {\n            return false;\n        }\n\n        let isEmpty = (this.state.entryboxContent.trim().length === 0);\n        if (isEmpty && this.props.focused) {\n            return true;\n        }\n        \n        if (!isEmpty && this.state.editedSinceLastFocus) {\n            return true;\n        }\n\n        return false;\n    }\n\n    computeEntryboxContent(indentedUnits: number, rawContent: string) {\n        return computeIndentString(indentedUnits) + rawContent.trim();\n    }\n\n    componentDidUpdate(oldProps: NoteRowProps, oldState: NoteRowState) {\n        if (oldState.indentedUnits !== this.state.indentedUnits) {\n            this.setState(state => ({\n                entryboxContent: this.computeEntryboxContent(this.state.indentedUnits, this.state.entryboxContent)\n            }));\n            this.noteLine.setIndentedUnits(this.state.indentedUnits);\n        }\n\n        if (oldState.entryboxContent !== this.state.entryboxContent) {\n            this.noteLine.setContent(this.state.entryboxContent, true);\n            NoteContentHandler.updateNote(this.props.note);\n        }\n\n        if (oldProps.focused !== this.props.focused && !this.props.focused) {\n            this.setState({ editedSinceLastFocus: false })\n        }\n        if (this.entryboxElement.current !== null) {\n            if (this.props.focused) {\n                this.entryboxElement.current.focus();\n            }\n        }\n    }\n\n    componentDidMount() {\n        if (this.entryboxElement.current !== null) {\n            if (this.props.focused) {\n                this.entryboxElement.current.focus();\n            }\n        }\n    }\n\n    getTextUntilCursor(): string | null {\n        let entryboxElem = this.entryboxElement.current\n        if (entryboxElem !== null) {\n            return entryboxElem.value.slice(0, entryboxElem.selectionStart+1);\n        }\n\n        return null;\n    }\n\n    getNumRows(): number {\n        let entryElem = this.entryboxElement.current;\n        if (entryElem !== null) {\n            return Math.floor(entryElem.clientHeight / ROW_HEIGHT); \n        }\n        return 0;\n    }\n\n    getNoteLine(): NoteLine {\n        return this.noteLine;\n    }\n\n    handleClick(e: React.MouseEvent) {\n        this.props.clickHandler(this);\n    }\n\n    handleKeyUp(e: React.KeyboardEvent) {\n        this.props.keyUpHandler(this);\n    }\n\n    handleChange(e: React.ChangeEvent) {\n        this.setState({ entryboxContent: (e.target as HTMLTextAreaElement).value, editedSinceLastFocus: true });\n        NoteContentHandler.updateNote(this.props.note);\n    }\n\n    handleKeyDown(e: React.KeyboardEvent) {\n        if (!this.props.keyDownHandler(this, e)) {\n            return;\n        }\n\n        if (e.key === \"Tab\") {\n            e.preventDefault();\n            if (e.shiftKey) {\n                this.setState(state => ({ indentedUnits: Math.max(state.indentedUnits - 1, 0) }));\n            } else {\n                this.setState(state => ({ indentedUnits: state.indentedUnits + 1 }));\n            }\n        }\n    }\n\n    handleEntryboxFocus(e: React.FocusEvent) {\n        this.props.focusHandler(this.noteLine);\n\n        if (this.state.entryboxContent.trim().length === 0 && this.entryboxElement.current != null) {\n            let currentRawLength = this.entryboxElement.current.textLength;\n            this.entryboxElement.current.setSelectionRange(currentRawLength, currentRawLength);\n        }\n    }\n}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\n\ninterface NoteTitleProps {\n    title: string;\n    titleChangeHandler: (newTitle: string) => any;\n}\n\ninterface NoteTitleState {\n    editing: boolean;\n    titleValue: string;\n}\n\nexport class NoteTitle extends React.Component<NoteTitleProps, NoteTitleState> {\n    inputRef = React.createRef<HTMLInputElement>();\n\n    constructor(props: NoteTitleProps) {\n        super(props);\n\n        this.state = { editing: false, titleValue: props.title};\n    }\n\n    render() {\n        return (\n            <div className=\"note-title\">\n                <input type=\"text\"\n                    ref={this.inputRef}\n                    onClick={this.handleClick.bind(this)}\n                    onKeyDown={this.handleKeyDown.bind(this)}\n                    onChange={this.handleChange.bind(this)}\n                    onBlur={this.handleBlur.bind(this)}\n                    value={this.state.titleValue} />\n            </div>\n        )\n    }\n\n    handleClick(e: React.MouseEvent) {\n        this.setState({ editing: true });\n    }\n\n    handleKeyDown(e: React.KeyboardEvent) {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n\n            this.props.titleChangeHandler(this.state.titleValue)\n            this.setState({ editing: false});\n        }\n    }\n\n    handleChange(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n        this.setState({ titleValue: e.currentTarget.value});\n    }\n\n    handleBlur(e: React.FocusEvent) {\n        this.setState({titleValue: this.props.title});\n    }\n}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\r\nimport React from \"react\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport {ROW_HEIGHT, ENTRYBOX_CLASS_NAME} from \"./noterow\";\r\n\r\n\r\ninterface NoteRowMirrorProps {\r\n    value: string;\r\n}\r\n\r\ninterface NoteRowMirrorState {\r\n}\r\n\r\n/** This is a helper component for computing where the cursor is within a NoteRow. */\r\nexport class NoteRowMirror extends React.Component<NoteRowMirrorProps, NoteRowMirrorState> {\r\n    mirrorElem = React.createRef<HTMLTextAreaElement>();\r\n\r\n    render() {\r\n        return <TextareaAutosize\r\n                    inputRef={this.mirrorElem}\r\n                    value={this.props.value}\r\n                    className=\"entrybox entrybox-mirror\" />;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.mirrorElem.current !== null) {\r\n            this.mirrorElem.current.style.width = this.getEntryboxWidth() + \"px\";\r\n        }\r\n    }\r\n\r\n    getCurrentRow(): (number | null) {\r\n        if (this.mirrorElem.current !== null) {\r\n            return (Math.floor(this.mirrorElem.current.clientHeight / ROW_HEIGHT));\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n  getEntryboxWidth(): number {\r\n    let firstRow = document.getElementsByClassName(ENTRYBOX_CLASS_NAME)[0];\r\n    if (firstRow) {\r\n      return firstRow.clientWidth;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert';\n\nenum Message {\n    NONE,\n    COPY_TO_CLIPBOARD_FAILED,\n    COPY_TO_CLIPBOARD_SUCCESS\n}\n\ninterface NotifierProps {\n}\n\ninterface NotifierState {\n    notification: Message;\n    // Arbitrary data provided by whatever sets up this notification.\n    messageData: string\n}\n\nconst CLOSE_TIMEOUT = 2000;\n\nexport class Notifier extends React.Component<NotifierProps, NotifierState> {\n    timerId: (NodeJS.Timeout | null) = null;\n\n    constructor(props: NotifierProps) {\n        super(props);\n\n        this.state = {\n            notification: Message.NONE,\n            messageData: \"\"\n        };\n    }\n\n    render() {\n        return <div className=\"notification-area\">\n            <Alert variant=\"success\" show={this.state.notification === Message.COPY_TO_CLIPBOARD_SUCCESS}>\n                Note text copied to clipboard.\n                </Alert>\n            <Alert variant=\"warning\" show={this.state.notification === Message.COPY_TO_CLIPBOARD_FAILED}>\n                Copy to clipboard failed. Error was: {this.state.messageData}.\n                </Alert>\n        </div>\n    }\n\n    public showCopyToClipboardFailed(error: string) {\n        this.setNotification(Message.COPY_TO_CLIPBOARD_FAILED, error);\n    }\n\n    public showCopyToClipboardSuccess() {\n        this.setNotification(Message.COPY_TO_CLIPBOARD_SUCCESS, \"\");\n    }\n\n    public setNotification(notifType: Message, data: string) {\n        this.setState({\n            notification: notifType,\n            messageData: data\n        });\n    }\n\n    componentDidUpdate(prevProps: NotifierProps, prevState: NotifierState) {\n        if (this.state.notification !== Message.NONE \n            && (prevState.notification !== this.state.notification || prevState.messageData !== this.state.messageData)) {\n            if (this.timerId !== null) {\n                clearTimeout(this.timerId);\n            }\n\n            this.timerId = setTimeout(() => {\n                this.setState({\n                    notification: Message.NONE,\n                    messageData: \"\"\n                })\n            }, CLOSE_TIMEOUT);\n\n        }\n    }\n\n}","/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport {DriveSignInState} from './DriveSyncHandler';\r\nimport DriveSyncHandler from './DriveSyncHandler';\r\n\r\ninterface MenuProps {\r\n    newNoteHandler: () => void;\r\n    timestampLockToggleHandler: () => void;\r\n    signInHandler: () => void;\r\n    signOutHandler: () => void;\r\n    clipboardHandler: () => void;\r\n    timestampsLocked: boolean;\r\n}\r\n\r\ninterface MenuState {\r\n  open: boolean;\r\n  driveSignInState: DriveSignInState;\r\n}\r\n\r\nexport class Menu extends React.Component<MenuProps, MenuState> {\r\n    constructor(props: MenuProps) {\r\n        super(props);\r\n\r\n        this.state = { open: false, driveSignInState: DriveSignInState.LOADING}\r\n        DriveSyncHandler.addSignInStateHandler((isSignedIn: DriveSignInState) =>{\r\n            this.setState({ driveSignInState: isSignedIn})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let toggleTimestampsString = (this.props.timestampsLocked)\r\n                        ? \"Unlock Timestamps\"\r\n                        : \"Lock Timestamps\";\r\n        \r\n        let driveMenuItems: Array<any> = [];\r\n\r\n        if (this.state.driveSignInState === DriveSignInState.SIGNED_IN) {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"signout\" onClick={(e: React.MouseEvent<any>) => this.props.signOutHandler()}>\r\n                    Sign out of Google Drive\r\n                </Dropdown.Item>\r\n            ]\r\n        } else if (this.state.driveSignInState === DriveSignInState.SIGNED_OUT) {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"signin\" onClick={(e: React.MouseEvent<any>) => this.props.signInHandler()}>\r\n                    Sign into Google Drive\r\n                </Dropdown.Item>\r\n            ];\r\n        } else {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"loading\" onClick={(e: React.MouseEvent<any>) => this.props.signInHandler()}>\r\n                    Drive Login Loading...\r\n                </Dropdown.Item>\r\n            ];\r\n        }\r\n\r\n        \r\n        return (\r\n            <DropdownButton alignRight id=\"menu\" title=\"Menu\">\r\n                <Dropdown.Item onClick={(e: React.MouseEvent<any>) => this.props.newNoteHandler()}>New Note</Dropdown.Item>\r\n                <Dropdown.Item onClick={(e: React.MouseEvent<any>) => this.props.timestampLockToggleHandler()}>\r\n                    {toggleTimestampsString}\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={(e: React.MouseEvent<any>) => this.props.clipboardHandler()}>Copy Note Contents</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                {driveMenuItems}\r\n                <Dropdown.Divider />\r\n                <Dropdown.Item onClick={this.githubHandler.bind(this)}>\r\n                    Source code on GitHub\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={this.bugHandler.bind(this)}>\r\n                    Feedback? File a bug\r\n                </Dropdown.Item>\r\n            </DropdownButton>\r\n        )\r\n    }\r\n\r\n    githubHandler(e: React.MouseEvent<any>) {\r\n        window.open(\"https://github.com/jordonwii/timeline-notes\");\r\n    }\r\n\r\n    bugHandler(e: React.MouseEvent<any>) {\r\n        window.open(\"https://github.com/jordonwii/timeline-notes/issues/new\");\r\n    }\r\n}","/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport React from \"react\";\r\nimport DriveSyncHandler, { DriveSyncStatus } from \"./DriveSyncHandler\";\r\n\r\ninterface SyncStatusAreaProps {\r\n  noteDriveId: string;\r\n  signInHandler: () => void;\r\n}\r\n\r\ninterface SyncStatusAreaState {\r\n    syncStatus: DriveSyncStatus;\r\n}\r\n\r\nclass SyncStatusArea extends React.Component<SyncStatusAreaProps, SyncStatusAreaState> {\r\n    constructor(props: SyncStatusAreaProps) {\r\n        super(props);\r\n\r\n        DriveSyncHandler.addSyncStatusChangeHandler(this.handleSyncStatusChange.bind(this));\r\n        this.state = {syncStatus: DriveSyncStatus.LOADING };\r\n    }\r\n\r\n    handleSyncStatusChange(newStatus: DriveSyncStatus) {\r\n        this.setState({ syncStatus: newStatus });\r\n    }\r\n\r\n  render() {\r\n      let className = \"\";\r\n      let text: JSX.Element;\r\n\r\n      switch (this.state.syncStatus) {\r\n          case DriveSyncStatus.SYNCING:\r\n              className = \"syncing\";\r\n              text = <span>Syncing note to Drive...</span>;\r\n              break;\r\n          case DriveSyncStatus.SYNCED:\r\n              className = \"synced\";\r\n              text = <span>Add content to sync note...</span>;\r\n              break;\r\n          case DriveSyncStatus.LOADING:\r\n              className = \"loading\";\r\n              text = <span>Loading Drive state...</span>;\r\n              break;\r\n          case DriveSyncStatus.SIGNED_OUT:\r\n              className = \"signed-out\";\r\n              // eslint-disable-next-line\r\n              text = <a href=\"#\" onClick={(e: React.MouseEvent<any>) => this.props.signInHandler()}>Not signed into Drive</a>;\r\n              break;\r\n          default:\r\n              return;\r\n      }\r\n\r\n      let showDocsLink = (this.props.noteDriveId.length > 0 && \r\n                            (this.state.syncStatus === DriveSyncStatus.SYNCED ||\r\n                             this.state.syncStatus === DriveSyncStatus.SYNCING));\r\n    return (\r\n      <div className={\"view-in-docs-link \" + className}>\r\n        {showDocsLink && \r\n                <a href={\"https://docs.google.com/document/d/\" + this.props.noteDriveId + \"/edit\"}\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\">\r\n            View Note in Drive\r\n          </a>}\r\n          {!showDocsLink && text}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ninterface LockIconProps {\r\n  noteLocked: boolean\r\n}\r\n\r\ninterface LockIconState {\r\n}\r\n\r\nclass LockIcon extends React.Component<LockIconProps, LockIconState> {\r\n  render() {\r\n      let visibleText = this.props.noteLocked ? \"visible\" : \"invisible\";\r\n\r\n      return (\r\n          <span className={\"note-locked-icon \" + visibleText}\r\n                title=\"Timestamps are locked. Unlock via the menu.\"></span>\r\n      )\r\n  }\r\n}\r\n\r\ninterface StatusAreaProps {\r\n    noteDriveId: string;\r\n    timestampsLocked: boolean;\r\n    signInHandler: () => void;\r\n}\r\n\r\ninterface StatusAreaState {}\r\n\r\nexport default class StatusArea extends React.Component<StatusAreaProps, StatusAreaState> {\r\n    render() {\r\n        return <div className=\"status-area\">\r\n            <SyncStatusArea noteDriveId={this.props.noteDriveId} signInHandler={this.props.signInHandler} />\r\n            <LockIcon noteLocked={this.props.timestampsLocked} />\r\n        </div>\r\n\r\n    }\r\n}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { NoteRow } from './noterow';\nimport { NoteLine } from './NoteLine';\nimport { NoteTitle } from './notetitle';\nimport { NoteRowMirror } from './noterowmirror';\nimport { Note } from './Note';\nimport { Menu } from './menu';\nimport NoteContentHandler from './NoteContentHandler';\nimport DriveSyncHandler, { DriveSignInState } from './DriveSyncHandler';\nimport StatusArea from './statusarea';\nimport { Notifier } from './notifier';\n\n\ndeclare var gapi: any\n\nconst SYNC_TIMEOUT = 2000;\n\ninterface AppProps {\n}\n\ninterface AppState {\n  focusedNoteRowId: number;\n  note: Note;\n  currentRowCursorText: string;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  wrapperElement = React.createRef<HTMLDivElement>();\n  mirrorRef = React.createRef<NoteRowMirror>();\n  notifierRef = React.createRef<Notifier>();\n\n  private editedSinceLastDriveSync = false;\n  private syncTimer: NodeJS.Timeout | null = null;\n\n  constructor(props: AppProps) {\n    super(props);\n    DriveSyncHandler.init();\n\n    let note = NoteContentHandler.getLastEditedNote();\n    let firstNoteLineId: number;\n\n    if (note === null) {\n      note = this.createNewNote();\n      firstNoteLineId = note.getFirstNoteLineId();\n    } else {\n      firstNoteLineId = note.getFirstNoteLineId();\n    }\n    this.state = { note: note, focusedNoteRowId: firstNoteLineId, currentRowCursorText: \"\" }\n  }\n\n  createNewNote(): Note {\n    let note = new Note();\n    note.addLine();\n\n    return note;\n  }\n\n  componentDidMount() {\n    this.updateWindowTitle();\n    DriveSyncHandler.addSignInStateHandler((state: DriveSignInState) => {\n      if (state !== DriveSignInState.SIGNED_IN) {\n        if (this.syncTimer !== null) {\n          clearTimeout(this.syncTimer);\n          this.syncTimer = null;\n        }\n        return;\n      }\n\n      DriveSyncHandler.saveNote(this.state.note).then(noteId => {\n        let note = this.state.note;\n        if (noteId.length > 0) {\n          note.setDriveId(noteId);\n          this.setState({ note: note });\n        }\n\n        setTimeout(this.syncTimerHandler.bind(this), SYNC_TIMEOUT);\n      });\n    });\n  }\n\n  componentDidUpdate(oldProps: AppProps, oldState: AppState) {\n    if (oldState.note.getTitle() !== this.state.note.getTitle()) {\n      this.updateWindowTitle();\n    }\n\n  }\n\n  async syncTimerHandler() {\n    if (this.editedSinceLastDriveSync) {\n      let id = await DriveSyncHandler.saveNote(this.state.note);\n      if (id.length > 0) {\n        let note = this.state.note;\n        note.setDriveId(id);\n        this.setState({ note: note })\n      }\n      this.editedSinceLastDriveSync = false;\n    }\n\n    this.syncTimer = setTimeout(this.syncTimerHandler.bind(this), SYNC_TIMEOUT);\n  }\n\n  render() {\n    let noteRows = this.state.note.getLines().map(noteRow => {\n      return (<NoteRow keyDownHandler={this.handleNoteRowKeyDown.bind(this)}\n        keyUpHandler={this.handleNoteRowKeyUp.bind(this)}\n        focusHandler={this.noteRowFocusHandler.bind(this)}\n        clickHandler={this.handleNoteRowClick.bind(this)}\n        note={this.state.note}\n        rowId={noteRow.id}\n        key={noteRow.id}\n        focused={noteRow.id === this.state.focusedNoteRowId} />);\n    });\n\n    return (\n      <div className=\"App\" ref={this.wrapperElement}>\n        <div className=\"header\">\n          <NoteTitle title={this.state.note.getTitle()} titleChangeHandler={this.handleTitleChange.bind(this)} />\n          <StatusArea noteDriveId={this.state.note.getDriveId()}\n            timestampsLocked={this.state.note.getTimestampsLocked()}\n            signInHandler={this.signInHandler.bind(this)} />\n          <Notifier ref={this.notifierRef} />\n          <Menu timestampsLocked={this.state.note.getTimestampsLocked()}\n            newNoteHandler={this.newNoteHandler.bind(this)}\n            timestampLockToggleHandler={this.handleToggleTimestampsLocked.bind(this)}\n            signOutHandler={this.signOutHandler.bind(this)}\n            signInHandler={this.signInHandler.bind(this)}\n            clipboardHandler={this.copyToClipboard.bind(this)} />\n        </div>\n        {noteRows}\n        <NoteRowMirror\n          value={this.state.currentRowCursorText}\n          ref={this.mirrorRef} />\n      </div>\n    );\n  }\n\n  signInHandler() {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  signOutHandler() {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  copyToClipboard() {\n    navigator.clipboard.writeText(this.state.note.convertToText())\n      .then(() => {\n        if (this.notifierRef.current != null) {\n          this.notifierRef.current.showCopyToClipboardSuccess();\n        }\n      }).catch(\n        r => {\n          if (this.notifierRef.current != null) {\n            this.notifierRef.current.showCopyToClipboardFailed(r);\n          }\n        }\n      )\n  }\n\n  handleTitleChange(newTitle: string) {\n    this.state.note.setTitle(newTitle);\n    this.setState({ note: this.state.note });\n    NoteContentHandler.updateNote(this.state.note);\n  }\n\n  updateWindowTitle() {\n    document.title = this.state.note.getTitle() + \" - Interview Notes\";\n  }\n\n  handleToggleTimestampsLocked() {\n    let note = this.state.note;\n\n    note.setTimestampsLocked(!note.getTimestampsLocked());\n    this.setState({ note: note });\n  }\n\n  newNoteHandler() {\n    let note = this.createNewNote();\n    // Set this to true so that a sync happens immediately.\n    this.editedSinceLastDriveSync = true;\n    this.setState({ note: note, focusedNoteRowId: note.getFirstNoteLineId() });\n  }\n\n  handleNoteRowClick(n: NoteRow) {\n    this.setState({ currentRowCursorText: (n.getTextUntilCursor() || \"\") });\n  }\n\n  handleNoteRowKeyDown(noteRow: NoteRow, e: React.KeyboardEvent): boolean {\n    this.editedSinceLastDriveSync = true;\n\n    let noteLine = noteRow.getNoteLine();\n\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      let note = this.state.note;\n      let newNote: NoteLine | null;\n\n      if (e.ctrlKey) {\n        newNote = note.addLine(noteLine.getIndentedUnits());\n      } else {\n        newNote = note.addLineAfter(this.state.focusedNoteRowId, noteLine.getIndentedUnits());\n      }\n\n      if (newNote === null) {\n        return false;\n      }\n\n      this.setState({ note: note, focusedNoteRowId: newNote.id });\n      return false;\n    } else if (e.key === \"Backspace\") {\n      let focusedRow = this.state.note.getLine(this.state.focusedNoteRowId);\n      if (focusedRow !== undefined && focusedRow.isEmpty() && this.state.note.getLines().length > 1) {\n        let nextFocusedRowId = this.state.note.getPreviousRowId(this.state.focusedNoteRowId);\n        this.state.note.deleteRow(this.state.focusedNoteRowId);\n\n        if (nextFocusedRowId !== null) {\n          if (nextFocusedRowId === this.state.focusedNoteRowId) {\n            // This means the first line had focus, so the new first line\n            // should now have focus.\n            nextFocusedRowId = this.state.note.getFirstNoteLineId();\n          }\n\n          this.setState({ focusedNoteRowId: nextFocusedRowId });\n        } else {\n          console.error(\"Got a null previous row id relative to: \", this.state.focusedNoteRowId);\n          this.setState({ focusedNoteRowId: this.state.note.getFirstNoteLineId() });\n        }\n\n        NoteContentHandler.updateNote(this.state.note);\n\n        // Since we're catching the keydown event, if we don't call preventDefault,\n        // a character will get deleted on the line that gets focus.\n        e.preventDefault();\n\n      }\n    } else if (e.key === \"s\" && e.ctrlKey) {\n      // Override Ctrl+S to force a save. This really shouldn't do anything in practice,\n      // since the timer should be running, but it makes it safe for users who have\n      // Ctrl+S muscle memory to use it.\n      DriveSyncHandler.saveNote(this.state.note);\n      e.preventDefault();\n    } else if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n      let currentRow: number | null = null;\n      if (this.mirrorRef.current !== null) {\n        currentRow = this.mirrorRef.current.getCurrentRow();\n      }\n\n      if (currentRow === null) {\n        return true;\n      }\n\n      let nextFocusedRowId: (number | null) = null;\n\n      if (e.key === \"ArrowUp\" && currentRow === 0) {\n        nextFocusedRowId = this.state.note.getPreviousRowId(this.state.focusedNoteRowId);\n      } else if (e.key === \"ArrowDown\" && currentRow === noteRow.getNumRows()) {\n        nextFocusedRowId = this.state.note.getNextRowId(this.state.focusedNoteRowId);\n      }\n\n      if (nextFocusedRowId !== null) {\n        this.setState({ focusedNoteRowId: nextFocusedRowId });\n      }\n    }\n\n    return true;\n  }\n\n  handleNoteRowKeyUp(noteRow: NoteRow) {\n    this.setState({ currentRowCursorText: (noteRow.getTextUntilCursor() || \"\") });\n  }\n\n  noteRowFocusHandler(note: NoteLine) {\n    this.setState({ focusedNoteRowId: note.id });\n  }\n}\n\nexport default App;\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}